(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{185:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string","aria-hidden":"true"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("h2",{attrs:{id:"charat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#charat","aria-hidden":"true"}},[t._v("#")]),t._v(" charAt")]),t._v(" "),a("blockquote",[a("p",[t._v("str.charAt(index)")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("var anyString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Brave new world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nanyString.charAt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" //"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),t._v("\n")])])]),a("h2",{attrs:{id:"concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concat","aria-hidden":"true"}},[t._v("#")]),t._v(" concat")]),t._v(" "),a("blockquote",[a("p",[t._v("str.concat(string2, string3[, ..., stringN])")])]),t._v(" "),a("p",[a("strong",[t._v("强烈建议使用 赋值操作符（+, +=）代替 concat 方法")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("var hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhello.concat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" have a nice day."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" //"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello,World have a nice day."')]),t._v("\n")])])]),a("h2",{attrs:{id:"includes-startswith-endswith"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#includes-startswith-endswith","aria-hidden":"true"}},[t._v("#")]),t._v(" includes startsWith endsWith")]),t._v(" "),a("blockquote",[a("p",[t._v("str.includes(searchString[, position])")])]),t._v(" "),a("ul",[a("li",[t._v("searchString 要在此字符串中搜索的字符串。")]),t._v(" "),a("li",[t._v("position 可选。从当前字符串的哪个索引位置开始搜寻子字符串，默认值为 0。")])]),t._v(" "),a("p",[a("strong",[t._v("includes() 方法是区分大小写的。例如，下面的表达式会返回 false ：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blue Whale'")]),t._v(".includes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //  "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blue Whale'")]),t._v(".includes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blue Whale'")]),t._v(".includes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blue'")]),t._v(",1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blue Whale'")]),t._v(".includes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lue'")]),t._v(",1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("str.startsWith(searchString[, position])")])]),t._v(" "),a("ul",[a("li",[t._v("searchString 要搜索的子字符串。")]),t._v(" "),a("li",[t._v("position 可选 在 str 中搜索 searchString 的开始位置，默认值为 0，也就是真正的字符串开头处。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("const str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Saturday night plans'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr1.startsWith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("/true\nstr1.startsWith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sat'")]),t._v(",1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("/false\nstr1.startsWith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'at'")]),t._v(",1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("/true\n\n")])])]),a("blockquote",[a("p",[t._v("str.endsWith(searchString[, length])")])]),t._v(" "),a("ul",[a("li",[t._v("searchString 要搜索的子字符串。")]),t._v(" "),a("li",[t._v("length 可选。作为 str 的长度。默认值为 str.length。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("const str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cats are the best!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr1.endsWith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'best'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //false\nstr1.endsWith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'best'")]),t._v(", 17"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //true\nstr1.endsWith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'best!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //true\n")])])]),a("h2",{attrs:{id:"indexof-lastindexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexof-lastindexof","aria-hidden":"true"}},[t._v("#")]),t._v(" indexOf lastIndexOf")]),t._v(" "),a("blockquote",[a("p",[t._v("str.indexOf(searchValue[, fromIndex]) 方法区分大小写")])]),t._v(" "),a("ul",[a("li",[t._v("searchValue 一个字符串表示被查找的值。")]),t._v(" "),a("li",[t._v("fromIndex 可选 表示调用该方法的字符串中开始查找的位置。可以是任意整数。默认值为 0。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Blue Whale"')]),t._v(".indexOf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //0\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Blue Whale"')]),t._v(".indexOf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Blue"')]),t._v(",1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" //-1\n")])])]),a("blockquote",[a("p",[t._v("str.lastIndexOf(searchValue[, fromIndex]) 方法区分大小写")])]),t._v(" "),a("ul",[a("li",[t._v("searchValue 一个字符串，表示被查找的值。")]),t._v(" "),a("li",[t._v("fromIndex 可选 从调用该方法字符串的此位置处开始查找。可以是任意整数。默认值为 str.length。如果为负值，则被看作 0")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"canal"')]),t._v(".lastIndexOf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 3\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"canal"')]),t._v(".lastIndexOf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(",2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // 1\n")])])]),a("h2",{attrs:{id:"padstart-padend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#padstart-padend","aria-hidden":"true"}},[t._v("#")]),t._v(" padStart padEnd")]),t._v(" "),a("blockquote",[a("p",[t._v("str.padStart(targetLength [, padString])  用于头部补全")])]),t._v(" "),a("blockquote",[a("p",[t._v("str.padEnd(targetLength [, padString])    用于尾部补全")])]),t._v(" "),a("ul",[a("li",[t._v("targetLength\n当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身")]),t._v(" "),a("li",[t._v('padString 可选\n填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 " "（U+0020）。')])]),t._v(" "),a("p",[t._v("常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(".padStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("10, "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0000000001"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12'")]),t._v(".padStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("10, "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0000000012"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123456'")]),t._v(".padStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("10, "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0000123456"')]),t._v("\n")])])]),a("p",[t._v("另一个用途是提示字符串格式。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12'")]),t._v(".padStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("10, "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'YYYY-MM-DD'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YYYY-MM-12"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'09-12'")]),t._v(".padStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("10, "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'YYYY-MM-DD'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YYYY-09-12"')]),t._v("\n")])])]),a("h2",{attrs:{id:"repeat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repeat","aria-hidden":"true"}},[t._v("#")]),t._v(" repeat")]),t._v(" "),a("blockquote",[a("p",[t._v("str.repeat(count)")])]),t._v(" "),a("ul",[a("li",[t._v("repeat方法返回一个新字符串，表示将原字符串重复n次。")]),t._v(" "),a("li",[t._v("count 介于0和正无穷大之间的整数 : [0, +∞) 。表示在新构造的字符串中重复了多少遍原字符串。")]),t._v(" "),a("li",[t._v("参数如果是小数，会被取整。")]),t._v(" "),a("li",[t._v("如果repeat的参数是负数或者Infinity，会报错。")]),t._v(" "),a("li",[t._v("但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。")]),t._v(" "),a("li",[t._v("参数NaN等同于 0。")]),t._v(" "),a("li",[t._v("如果repeat的参数是字符串，则会先转换成数字。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v(".repeat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     // RangeError: repeat count must be positive and "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("less")]),t._v(" than inifinity\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v(".repeat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v(".repeat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v(".repeat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcabc"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v(".repeat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("3.5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcabcabc"')]),t._v(" 参数count将会被自动转换成整数.\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v(".repeat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1/0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    // RangeError: repeat count must be positive and "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("less")]),t._v(" than inifinity\n")])])]),a("h2",{attrs:{id:"trimstart-trim-trimend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trimstart-trim-trimend","aria-hidden":"true"}},[t._v("#")]),t._v(" trimStart trim trimEnd")]),t._v(" "),a("blockquote",[a("p",[t._v("str.trim()  str.trimStart()  str.trimEnd()")])]),t._v(" "),a("ul",[a("li",[t._v("trim()方法会从一个字符串的两端删除空白字符。")]),t._v(" "),a("li",[t._v("trimStart()方法从字符串的开头删除空格。")]),t._v(" "),a("li",[t._v("trimEnd() 方法从一个字符串的右端移除空白字符。")]),t._v(" "),a("li",[t._v("trimStart trim trimEnd 方法并不影响原字符串本身，它返回的是一个新的字符串。")])]),t._v(" "),a("h2",{attrs:{id:"slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slice","aria-hidden":"true"}},[t._v("#")]),t._v(" slice")]),t._v(" "),a("blockquote",[a("p",[t._v("str.slice(beginSlice[, endSlice])")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("beginSlice\n从该索引（以 0 为基数）处开始提取原字符串中的字符。如果值为负数，会被当做 sourceLength + beginSlice 看待，这里的sourceLength 是字符串的长度 (例如， 如果beginSlice 是 -3 则看作是: sourceLength - 3)")])]),t._v(" "),a("li",[a("p",[t._v("endSlice\n可选。在该索引（以 0 为基数）处结束提取字符串。如果省略该参数，slice会一直提取到字符串末尾。如果该参数为负数，则被看作是 sourceLength + endSlice，这里的 sourceLength 就是字符串的长度(例如，如果 endSlice 是 -3，则是, sourceLength - 3)。")])]),t._v(" "),a("li",[a("p",[t._v("slice() 从一个字符串中提取字符串并返回新字符串。在一个字符串中的改变不会影响另一个字符串。也就是说，slice 不修改原字符串，只会返回一个包含了原字符串中部分字符的新字符串。")])])]),t._v(" "),a("p",[a("strong",[t._v("注意：slice() 提取的新字符串包括beginSlice但不包括 endSlice。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("var str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The morning is upon us.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvar str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1.slice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("4, -2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // OUTPUT: morning is upon u\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("var str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The morning is upon us.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr.slice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     // returns "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'us.'")]),t._v("\nstr.slice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-3, -1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // returns "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'us'")]),t._v("\nstr.slice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0, -1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  // returns "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The morning is upon us'")]),t._v("\n")])])]),a("h2",{attrs:{id:"split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#split","aria-hidden":"true"}},[t._v("#")]),t._v(" split")]),t._v(" "),a("blockquote",[a("p",[t._v("str.split([separator[, limit]])")])]),t._v(" "),a("p",[t._v('Tip: 如果空字符串("")被用作分隔符，则字符串会在每个字符之间分割。')]),t._v(" "),a("ul",[a("li",[t._v("separator\n指定表示每个拆分应发生的点的字符串。separator 可以是一个字符串或正则表达式。 如果纯文本分隔符包含多个字符，则必须找到整个字符串来表示分割点。如果在str中省略或不出现分隔符，则返回的数组包含一个由整个字符串组成的元素。如果分隔符为空字符串，则将str原字符串中每个字符的数组形式返回。")]),t._v(" "),a("li",[t._v("limit\n一个整数，限定返回的分割片段数量。当提供此参数时，split 方法会在指定分隔符的每次出现时分割该字符串，但在限制条目已放入数组时停止。如果在达到指定限制之前达到字符串的末尾，它可能仍然包含少于限制的条目。新数组中不返回剩下的文本。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("var names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nvar re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /\\s*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("?:"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\s*/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnames.split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Harry Trump"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fred Barney"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Helen Rigby"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bill Abel"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Chris Hand"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nnames.split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re,2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("// "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Harry Trump"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fred Barney"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"substring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#substring","aria-hidden":"true"}},[t._v("#")]),t._v(" substring")]),t._v(" "),a("blockquote",[a("p",[t._v("str.substring(indexStart[, indexEnd])")])]),t._v(" "),a("ul",[a("li",[t._v("indexStart\n需要截取的第一个字符的索引，该字符作为返回的字符串的首字母。")]),t._v(" "),a("li",[t._v("indexEnd\n可选。一个 0 到字符串长度之间的整数，以该数字为索引的字符不包含在截取的字符串内。")])]),t._v(" "),a("p",[a("strong",[t._v("substring 提取从 indexStart 到 indexEnd（不包括）之间的字符。特别地：")])]),t._v(" "),a("ul",[a("li",[t._v("如果 indexStart 等于 indexEnd，substring 返回一个空字符串。")]),t._v(" "),a("li",[t._v("如果省略 indexEnd，substring 提取字符一直到字符串末尾。")]),t._v(" "),a("li",[t._v("如果任一参数小于 0 或为 NaN，则被当作 0。")]),t._v(" "),a("li",[t._v("如果任一参数大于 stringName.length，则被当作 stringName.length。")]),t._v(" "),a("li",[t._v("如果 indexStart 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。见下面的例子。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("var anyString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mozilla"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// 输出 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Moz"')]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0,3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("3,0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("3,-3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("3,NaN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-2,3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NaN,3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// 输出 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lla"')]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("4,7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("7,4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// 输出 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("4,4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// 输出 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mozill"')]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0,6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// 输出 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mozilla"')]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0,7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole.log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("anyString.substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0,10"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"tolowercase-tolocalelowercase-touppercase-tolocaleuppercase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tolowercase-tolocalelowercase-touppercase-tolocaleuppercase","aria-hidden":"true"}},[t._v("#")]),t._v(" toLowerCase toLocaleLowerCase toUpperCase toLocaleUpperCase")]),t._v(" "),a("blockquote",[a("p",[t._v("str.toLowerCase() str.toLocaleLowerCase 返回调用字符串值转换为小写的值\nstr.toUpperCase() str.toLocaleUpperCase 返回调用字符串值转换为大写的值")])]),t._v(" "),a("h2",{attrs:{id:"raw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw","aria-hidden":"true"}},[t._v("#")]),t._v(" raw")]),t._v(" "),a("blockquote",[a("p",[t._v("String.raw(callSite, ...substitutions)")])]),t._v(" "),a("blockquote",[a("p",[t._v("String.raw"),a("code",[t._v("templateString")])])]),t._v(" "),a("ul",[a("li",[t._v("callSite\n一个模板字符串的“调用点对象”。类似{ raw: ['foo', 'bar', 'baz'] }。")]),t._v(" "),a("li",[t._v("...substitutions\n任意个可选的参数，表示任意个内插表达式对应的值。")]),t._v(" "),a("li",[t._v("templateString\n模板字符串，可包含占位符（${...}）。")])]),t._v(" "),a("p",[t._v("在大多数情况下, String.raw()是用来处理模版字符串的. 不要被上面复杂的参数要求吓到，因为像所有的标签函数一样，你通常不需要把它看成一个普通函数，你只需要把它放在模板字符串前面就可以了，而不是在它后面加个括号和一堆参数来调用它，引擎会替你去调用它。")]),t._v(" "),a("p",[t._v("String.raw() 是唯一一个内置的模板字符串标签函数，因为它太常用了。不过它并没有什么特殊能力，你自己也可以实现一个和它功能一模一样的标签函数。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("String.raw"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("Hi\\n$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("2+3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n// "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hi\\n5!'")]),t._v("，Hi 后面的字符不是换行符，\\ 和 n 是两个不同的字符\n\nString.raw "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("Hi\\u000A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             \n// "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi\\\\u000A!"')]),t._v("，同上，这里得到的会是 \\、u、0、0、0、A 6个字符，\n// 任何类型的转义形式都会失效，保留原样输出，不信你试试.length\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nString.raw "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("Hi\\n$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             \n// "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi\\\\nBob!"')]),t._v("，内插表达式还可以正常运行\n\n\n// 正常情况下，你也许不需要将 String.raw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 当作函数调用。\n// 但是为了模拟 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("t$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("e$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("s$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" 你可以这样做:\nString.raw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" raw: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(", 0, 1, 2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t0e1s2t'")]),t._v("\n// 注意这个测试, 传入一个 string, 和一个类似数组的对象\n// 下面这个函数和 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("foo$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("2 + 3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("bar$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Java'")]),t._v(" + "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("baz"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" 是相等的.\nString.raw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  raw: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(", 2 + 3, "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Java'")]),t._v(" + "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo5barJavaScriptbaz'")]),t._v("\n")])])])])}],!1,null,null,null);s.default=r.exports}}]);