(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{171:function(e,s,n){"use strict";n.r(s);var r=n(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"代码规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码规范","aria-hidden":"true"}},[e._v("#")]),e._v(" 代码规范")]),e._v(" "),n("hr"),e._v(" "),n("h2",{attrs:{id:"js规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js规范","aria-hidden":"true"}},[e._v("#")]),e._v(" js规范")]),e._v(" "),n("h2",{attrs:{id:"css规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css规范","aria-hidden":"true"}},[e._v("#")]),e._v(" css规范")]),e._v(" "),n("h2",{attrs:{id:"html规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#html规范","aria-hidden":"true"}},[e._v("#")]),e._v(" html规范")]),e._v(" "),n("h2",{attrs:{id:"vue规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue规范","aria-hidden":"true"}},[e._v("#")]),e._v(" vue规范")]),e._v(" "),n("h3",{attrs:{id:"组件名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件名","aria-hidden":"true"}},[e._v("#")]),e._v(" 组件名")]),e._v(" "),n("ul",[n("li",[e._v("组件名最好为多个单词(such : v-header)")]),e._v(" "),n("li",[e._v("单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case)。")]),e._v(" "),n("li",[e._v("在html模板中使用横线命名 (kebab-case)")])]),e._v(" "),n("h3",{attrs:{id:"prop定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prop定义","aria-hidden":"true"}},[e._v("#")]),e._v(" prop定义")]),e._v(" "),n("ul",[n("li",[e._v("在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('反例\nprops: {\n  \'greeting-text\': String\n}\n<WelcomeMessage greetingText="hi"/>\n\n好例子\nprops: {\n  greetingText: String\n}\n<WelcomeMessage greeting-text="hi"/>\n\n')])])]),n("ul",[n("li",[e._v("prop定义应该尽量详细")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("反例:\n// 这样做只有开发原型系统时可以接受\nprops: ['status']\n\n好例子:\nprops: {\n  status: String\n}\n// 更好的做法！\nprops: {\n  status: {\n    type: String,\n    required: true,\n    validator: function (value) {\n      return [\n        'syncing',\n        'synced',\n        'version-conflict',\n        'error'\n      ].indexOf(value) !== -1\n    }\n  }\n}\n")])])]),n("h3",{attrs:{id:"避免-v-if-和-v-for-用在一起"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#避免-v-if-和-v-for-用在一起","aria-hidden":"true"}},[e._v("#")]),e._v(" 避免 v-if 和 v-for 用在一起")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('反例：\n<ul>\n  <li\n    v-for="user in users"\n    v-if="user.isActive"\n    :key="user.id"\n  >\n    {{ user.name }}\n  </li>\n</ul>\n\n好例子\ncomputed: {\n  activeUsers: function () {\n    return this.users.filter(function (user) {\n      return user.isActive\n    })\n  }\n}\n\n<ul>\n  <li\n    v-for="user in activeUsers"\n    :key="user.id"\n  >\n    {{ user.name }}\n  </li>\n</ul>\n或\n<ul v-if="shouldShowUsers">\n  <li\n    v-for="user in users"\n    :key="user.id"\n  >\n    {{ user.name }}\n  </li>\n</ul>\n\n')])])]),n("h3",{attrs:{id:"如果一组-v-if-v-else-的元素类型相同，最好使用-key-比如两个div元素-。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如果一组-v-if-v-else-的元素类型相同，最好使用-key-比如两个div元素-。","aria-hidden":"true"}},[e._v("#")]),e._v(" 如果一组 v-if + v-else 的元素类型相同，最好使用 key (比如两个div元素)。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('反例\n<div v-if="error">\n  错误：{{ error }}\n</div>\n<div v-else>\n  {{ results }}\n</div>\n好例子\n<div\n  v-if="error"\n  key="search-status"\n>\n  错误：{{ error }}\n</div>\n<div\n  v-else\n  key="search-results"\n>\n  {{ results }}\n</div>\n')])])])])}],!1,null,null,null);s.default=a.exports}}]);